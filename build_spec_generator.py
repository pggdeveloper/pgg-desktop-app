#!/usr/bin/env python3
"""
PyInstaller Spec File Generator for PGG Cattle Monitoring Application

This script dynamically generates a .spec file for PyInstaller that includes
all necessary dependencies, data files, and hidden imports for the complex
multi-camera cattle monitoring system.

The generated spec file handles:
- PyQt5 and all its dependencies
- OpenCV and computer vision libraries
- RealSense SDK bindings (pyrealsense2)
- ZED SDK bindings (pyzed)
- Scientific computing libraries (numpy, scipy, scikit-learn)
- 3D processing libraries (open3d, trimesh)
- Point cloud format libraries (laspy, pye57)

Usage:
    python build_spec_generator.py
"""

import os
import sys
from pathlib import Path

def generate_spec_file():
    """Generate PyInstaller .spec file with all necessary configurations"""

    # Define project paths
    project_root = Path(__file__).parent

    # Define hidden imports (modules not automatically detected by PyInstaller)
    hidden_imports = [
        # PyQt5 modules
        'PyQt5.QtCore',
        'PyQt5.QtGui',
        'PyQt5.QtWidgets',
        'PyQt5.sip',

        # Camera SDKs
        'pyrealsense2',
        #'pyzed',
        #'pyzed.sl',

        # OpenCV
        'cv2',
        'cv2.aruco',

        # Scientific computing
        'numpy',
        'numpy.core',
        'numpy.core._multiarray_umath',
        'scipy',
        'scipy.spatial',
        'scipy.spatial.transform',
        'scipy.signal',
        'scipy.optimize',
        'scipy.ndimage',

        # Machine learning
        'sklearn',
        'sklearn.cluster',
        'sklearn.linear_model',
        'sklearn.preprocessing',
        'sklearn.metrics',

        # 3D processing
        'open3d',
        'trimesh',
        'trimesh.exchange',
        'trimesh.viewer',

        # Point cloud formats
        'laspy',
        'pye57',

        # Image processing
        'skimage',
        'skimage.measure',
        'skimage.filters',
        'skimage.feature',
        'skimage.transform',

        # Data handling
        'pandas',

        # HTTP client
        'requests',
        'urllib3',

        # JSON/Data serialization
        'json',
        'pickle',

        # Date/time
        'datetime',
        'time',

        # Collections and dataclasses
        'dataclasses',
        'collections',
        'typing',

        # Threading
        'threading',
        'multiprocessing',
        'concurrent.futures',
    ]

    # Define data files to include
    datas = [
        # Add any config files, icons, or other data files here
        # ('source_path', 'destination_folder_in_exe')
    ]

    # Check if there are any data files to include
    if (project_root / 'config').exists():
        datas.append(('config', 'config'))
    if (project_root / 'icons').exists():
        datas.append(('icons', 'icons'))
    if (project_root / 'assets').exists():
        datas.append(('assets', 'assets'))

    # Define binaries to exclude (reduce size)
    excludes = [
        'matplotlib',  # Not used in this application
        'IPython',     # Not needed for deployed app
        'jupyter',     # Not needed
        'notebook',    # Not needed
        'sphinx',      # Documentation tool
        'pytest',      # Testing framework
        'setuptools',  # Build tool
    ]

    # Generate the spec file content
    spec_content = f'''# -*- mode: python ; coding: utf-8 -*-
"""
PyInstaller spec file for PGG Cattle Monitoring Application
Auto-generated by build_spec_generator.py
"""

import sys
from pathlib import Path

block_cipher = None

# Hidden imports - modules not automatically detected
hidden_imports = {hidden_imports}

# Data files to include
datas = {datas}

# Modules to exclude
excludes = {excludes}

a = Analysis(
    ['app.py'],  # Main entry point
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=hidden_imports,
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(
    a.pure,
    a.zipped_data,
    cipher=block_cipher
)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='PGG_Cattle_Monitor',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,  # Compress with UPX
    console=False,  # Set to True for debugging, False for release
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,  # Add icon path here if you have one: 'icons/app.ico'
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='PGG_Cattle_Monitor',
)
'''

    # Write spec file
    spec_path = project_root / 'pgg_app.spec'
    with open(spec_path, 'w', encoding='utf-8') as f:
        f.write(spec_content)

    print(f"PyInstaller spec file generated: {spec_path}")
    print(f"Hidden imports: {len(hidden_imports)} modules")
    print(f"Data files: {len(datas)} entries")
    print(f"Excluded modules: {len(excludes)} modules")

    return spec_path

if __name__ == '__main__':
    try:
        spec_path = generate_spec_file()
        print("\nSpec file generation successful!")
        print("\nNext step: Run build_windows_exe.bat to build the executable")
        sys.exit(0)
    except Exception as e:
        print(f"\nERROR: Failed to generate spec file: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        sys.exit(1)
